-- noinspection SqlDialectInspectionForFile

-- noinspection SqlNoDataSourceInspectionForFile

DROP TABLE USERS cascade constraints;
DROP TABLE Schedule cascade constraints;
DROP TABLE WorkShift cascade constraints;
DROP TABLE OrderItem cascade constraints;
DROP TABLE Orders cascade constraints;
DROP TABLE Discount cascade constraints;
DROP TABLE FoodItem cascade constraints;
DROP TABLE StockRoom cascade constraints;
DROP TABLE Supplier cascade constraints;
DROP TABLE Product cascade constraints;
DROP TABLE FoodCategory cascade constraints;

drop procedure add_user;
drop procedure add_supplier;
drop function employeehours;

drop sequence useridseq;

CREATE SEQUENCE useridseq START WITH 1
INCREMENT BY 1;

CREATE TABLE Users (
	UserId INT GENERATED BY DEFAULT ON NULL AS IDENTITY,
	Login NVARCHAR2(40) UNIQUE NOT NULL,
	Password NVARCHAR2(40) NOT NULL,
	Function NVARCHAR2(40) NOT NULL,
	FirstName NVARCHAR2(40) NOT NULL,
	LastName NVARCHAR2(40) NOT NULL,
	JobPosition NVARCHAR2(40) NOT NULL,
	HourlyRate FLOAT,
	PhoneNumber INT UNIQUE,
	Fired NUMBER(1) DEFAULT 0,
	constraint USERS_PK PRIMARY KEY (UserId));

/
CREATE TABLE Schedule (
	ScheduleId INT GENERATED BY DEFAULT ON NULL AS IDENTITY,
	UserId INT NOT NULL,
	WeekDate Date NOT NULL,
	DayDate Date NOT NULL,
	WeekDay INT NOT NULL CHECK (WeekDay>=0 AND WeekDay<7),
	StartTime NVARCHAR2(5) NOT NULL,
	EndTime NVARCHAR2(5) NOT NULL,
	constraint SCHEDULE_PK PRIMARY KEY (ScheduleId));

/
CREATE TABLE WorkShift (
	ShiftId INT GENERATED BY DEFAULT ON NULL AS IDENTITY,
	UserId INT NOT NULL,
	DateOfWS DATE NOT NULL,
	Hours FLOAT NOT NULL,
	constraint WORKSHIFT_PK PRIMARY KEY (ShiftId));


/
CREATE TABLE OrderItem (
	OrderItemId INT GENERATED BY DEFAULT ON NULL AS IDENTITY,
	OrderId INT NOT NULL,
	FoodId INT NOT NULL,
	Quantity INT NOT NULL CHECK(Quantity>0),
	constraint ORDERITEM_PK PRIMARY KEY (OrderItemId));


/
CREATE TABLE Orders (
	OrderId INT GENERATED BY DEFAULT ON NULL AS IDENTITY,
	UserId INT NOT NULL,
	DateOfOrder DATE NOT NULL,
	Amount INT NOT NULL,
	constraint ORDERS_PK PRIMARY KEY (OrderId));

CREATE TABLE FoodCategory (
	Name NVARCHAR2(40) NOT NULL,
	constraint FOODCATEGORY_PK PRIMARY KEY (Name));

/
CREATE TABLE Discount (
	DiscountCode NVARCHAR2(40) NOT NULL,
	FoodCategory NVARCHAR2(40) NOT NULL,
	DiscountValue INT NOT NULL,
	constraint DISCOUNT_PK PRIMARY KEY (DiscountCode));


/
CREATE TABLE FoodItem (
	FoodId INT GENERATED BY DEFAULT ON NULL AS IDENTITY,
	Name NVARCHAR2(40) NOT NULL,
	Price FLOAT NOT NULL,
	FoodCategory NVARCHAR2(40) NOT NULL,
	VAT FLOAT NOT NULL,
	constraint FOODITEM_PK PRIMARY KEY (FoodId));

/
CREATE TABLE Supplier (
	SupplierId INT GENERATED BY DEFAULT ON NULL AS IDENTITY,
	Name NVARCHAR2(40) UNIQUE NOT NULL,
	PhoneNumber INT NOT NULL,
	EmailAddress NVARCHAR2(40) NOT NULL CHECK (EmailAddress LIKE '%@%.%'),
	constraint SUPPLIER_PK PRIMARY KEY (SupplierId));

/
CREATE TABLE Product (
	ProductId INT GENERATED BY DEFAULT ON NULL AS IDENTITY,
	Name NVARCHAR2(40) NOT NULL,
	Price FLOAT NOT NULL,
	SupplierId INT NOT NULL,
	constraint PRODUCT_PK PRIMARY KEY (ProductId));

/


CREATE TABLE StockRoom (
	StockRoomId INT GENERATED BY DEFAULT ON NULL AS IDENTITY,
	UserId INT NOT NULL,
	ProductId INT NOT NULL,
	Name NVARCHAR2(40) UNIQUE NOT NULL,
	Quantity INT NOT NULL CHECK(Quantity>=0),
	Demand INT NOT NULL CHECK(Demand>=0),
	constraint STOCKROOM_PK PRIMARY KEY (StockRoomId));
/

ALTER TABLE Schedule ADD CONSTRAINT Schedule_fk0 FOREIGN KEY (UserId) REFERENCES Users(UserId);

ALTER TABLE WorkShift ADD CONSTRAINT WorkShift_fk0 FOREIGN KEY (UserId) REFERENCES Users(UserId);

ALTER TABLE OrderItem ADD CONSTRAINT OrderItem_fk0 FOREIGN KEY (OrderId) REFERENCES Orders(OrderId);
ALTER TABLE OrderItem ADD CONSTRAINT OrderItem_fk1 FOREIGN KEY (FoodId) REFERENCES FoodItem(FoodId);

ALTER TABLE Orders ADD CONSTRAINT Order_fk0 FOREIGN KEY (UserId) REFERENCES Users(UserId);


ALTER TABLE Discount ADD CONSTRAINT Discount_fk0 FOREIGN KEY (FoodCategory) REFERENCES FoodCategory(Name);
ALTER TABLE FoodItem ADD CONSTRAINT FoodItem_fk0 FOREIGN KEY (FoodCategory) REFERENCES FoodCategory(Name);

ALTER TABLE StockRoom ADD CONSTRAINT StockRoom_fk0 FOREIGN KEY (UserId) REFERENCES Users(UserId);
ALTER TABLE StockRoom ADD CONSTRAINT StockRoom_fk1 FOREIGN KEY (ProductId) REFERENCES Product(ProductId);


ALTER TABLE Product ADD CONSTRAINT Product_fk0 FOREIGN KEY (SupplierId) REFERENCES Supplier(SupplierId);

CREATE FUNCTION EMPLOYEEHOURS (EmpId IN INT, StartDate IN DATE, EndDate IN DATE)
 RETURN FLOAT IS
 HOURS FLOAT;
BEGIN
 SELECT SUM(HOURS)
 INTO HOURS
 FROM WorkShift
 WHERE UserId = EmpId AND DateOfWS>StartDate AND DateOfWS<EndDate;
 RETURN HOURS;
END EMPLOYEEHOURS;
/
CREATE OR REPLACE PROCEDURE ADD_SUPPLIER 
 (SupId IN INT DEFAULT NULL,
 SupName IN NVARCHAR2,
 Phone IN INT,
 Email IN NVARCHAR2) IS
BEGIN
	INSERT INTO Supplier VALUES (SupId, SupName, Phone, Email);
END ADD_SUPPLIER;
/
CREATE OR REPLACE PROCEDURE ADD_USER  
 (	LoginIn NVARCHAR2,
	Pass NVARCHAR2,
	Func NVARCHAR2,
	FName IN NVARCHAR2,
	Sname IN NVARCHAR2,
	Pos IN NVARCHAR2,
	HourRate IN FLOAT,
	Phone IN INT,
	AddedId OUT INT
 ) IS
 test int;
BEGIN
	INSERT INTO Users VALUES (NULL, LoginIn, Pass, Func, FName, Sname, Pos, HourRate, Phone, 0);
	update users
	set UserId= useridseq.nextval
	where Login=LoginIn;
	select useridseq.currval into AddedId from dual where 1=1;
END ADD_USER;
/
CREATE OR REPLACE PROCEDURE ADD_SCHEDULE
(
    idUser INT,
    Week Date,
    dateOfDay Date,
    WeekD INT,
    StartT NVARCHAR2,
    EndT NVARCHAR2
) IS
BEGIN
    DELETE FROM Schedule
    WHERE UserId=idUser AND DayDate=dateOfDay;
    INSERT INTO Schedule VALUES(NULL, idUser, Week, dateOfDay, WeekD, StartT, EndT);
END ADD_SCHEDULE;
/
Commit;
